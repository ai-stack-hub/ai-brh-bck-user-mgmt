name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: user-service-jar
          path: target/
      
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/user-service:${{ github.sha }}
            ${{ secrets.ACR_LOGIN_SERVER }}/user-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
      
      - name: Deploy to AKS
        run: |
          # Update deployment with new image
          kubectl set image deployment/user-service user-service=${{ secrets.ACR_LOGIN_SERVER }}/user-service:${{ github.sha }} -n ${{ github.event.inputs.environment || 'staging' }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/user-service -n ${{ github.event.inputs.environment || 'staging' }}
      
      - name: Verify deployment
        run: |
          # Check if pods are running
          kubectl get pods -n ${{ github.event.inputs.environment || 'staging' }} -l app=user-service
          
          # Check service status
          kubectl get svc -n ${{ github.event.inputs.environment || 'staging' }} -l app=user-service 